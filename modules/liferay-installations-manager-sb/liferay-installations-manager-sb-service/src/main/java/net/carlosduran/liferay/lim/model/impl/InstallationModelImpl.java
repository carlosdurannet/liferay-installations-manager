/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package net.carlosduran.liferay.lim.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import net.carlosduran.liferay.lim.model.Installation;
import net.carlosduran.liferay.lim.model.InstallationModel;
import net.carlosduran.liferay.lim.model.InstallationSoap;

/**
 * The base model implementation for the Installation service. Represents a row in the &quot;LIM_Installation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>InstallationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link InstallationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see InstallationImpl
 * @generated
 */
@JSON(strict = true)
public class InstallationModelImpl
	extends BaseModelImpl<Installation> implements InstallationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a installation model instance should use the <code>Installation</code> interface instead.
	 */
	public static final String TABLE_NAME = "LIM_Installation";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"installationId", Types.BIGINT},
		{"description", Types.VARCHAR}, {"path_", Types.VARCHAR},
		{"version", Types.VARCHAR}, {"vmId", Types.BIGINT},
		{"schemeId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("installationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("path_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("version", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vmId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("schemeId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LIM_Installation (uuid_ VARCHAR(75) null,installationId LONG not null primary key,description VARCHAR(75) null,path_ VARCHAR(75) null,version VARCHAR(75) null,vmId LONG,schemeId LONG)";

	public static final String TABLE_SQL_DROP = "drop table LIM_Installation";

	public static final String ORDER_BY_JPQL =
		" ORDER BY installation.installationId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY LIM_Installation.installationId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long INSTALLATIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Installation toModel(InstallationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Installation model = new InstallationImpl();

		model.setUuid(soapModel.getUuid());
		model.setInstallationId(soapModel.getInstallationId());
		model.setDescription(soapModel.getDescription());
		model.setPath(soapModel.getPath());
		model.setVersion(soapModel.getVersion());
		model.setVmId(soapModel.getVmId());
		model.setSchemeId(soapModel.getSchemeId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Installation> toModels(InstallationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Installation> models = new ArrayList<Installation>(
			soapModels.length);

		for (InstallationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public InstallationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _installationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setInstallationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _installationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Installation.class;
	}

	@Override
	public String getModelClassName() {
		return Installation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Installation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Installation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Installation, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Installation)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Installation, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Installation, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Installation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Installation, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Installation, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Installation>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Installation.class.getClassLoader(), Installation.class,
			ModelWrapper.class);

		try {
			Constructor<Installation> constructor =
				(Constructor<Installation>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Installation, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Installation, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Installation, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Installation, Object>>();
		Map<String, BiConsumer<Installation, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Installation, ?>>();

		attributeGetterFunctions.put("uuid", Installation::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Installation, String>)Installation::setUuid);
		attributeGetterFunctions.put(
			"installationId", Installation::getInstallationId);
		attributeSetterBiConsumers.put(
			"installationId",
			(BiConsumer<Installation, Long>)Installation::setInstallationId);
		attributeGetterFunctions.put(
			"description", Installation::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<Installation, String>)Installation::setDescription);
		attributeGetterFunctions.put("path", Installation::getPath);
		attributeSetterBiConsumers.put(
			"path", (BiConsumer<Installation, String>)Installation::setPath);
		attributeGetterFunctions.put("version", Installation::getVersion);
		attributeSetterBiConsumers.put(
			"version",
			(BiConsumer<Installation, String>)Installation::setVersion);
		attributeGetterFunctions.put("vmId", Installation::getVmId);
		attributeSetterBiConsumers.put(
			"vmId", (BiConsumer<Installation, Long>)Installation::setVmId);
		attributeGetterFunctions.put("schemeId", Installation::getSchemeId);
		attributeSetterBiConsumers.put(
			"schemeId",
			(BiConsumer<Installation, Long>)Installation::setSchemeId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getInstallationId() {
		return _installationId;
	}

	@Override
	public void setInstallationId(long installationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_installationId = installationId;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public String getPath() {
		if (_path == null) {
			return "";
		}
		else {
			return _path;
		}
	}

	@Override
	public void setPath(String path) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_path = path;
	}

	@JSON
	@Override
	public String getVersion() {
		if (_version == null) {
			return "";
		}
		else {
			return _version;
		}
	}

	@Override
	public void setVersion(String version) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_version = version;
	}

	@JSON
	@Override
	public long getVmId() {
		return _vmId;
	}

	@Override
	public void setVmId(long vmId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vmId = vmId;
	}

	@JSON
	@Override
	public long getSchemeId() {
		return _schemeId;
	}

	@Override
	public void setSchemeId(long schemeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_schemeId = schemeId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Installation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Installation toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Installation>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		InstallationImpl installationImpl = new InstallationImpl();

		installationImpl.setUuid(getUuid());
		installationImpl.setInstallationId(getInstallationId());
		installationImpl.setDescription(getDescription());
		installationImpl.setPath(getPath());
		installationImpl.setVersion(getVersion());
		installationImpl.setVmId(getVmId());
		installationImpl.setSchemeId(getSchemeId());

		installationImpl.resetOriginalValues();

		return installationImpl;
	}

	@Override
	public int compareTo(Installation installation) {
		long primaryKey = installation.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Installation)) {
			return false;
		}

		Installation installation = (Installation)object;

		long primaryKey = installation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Installation> toCacheModel() {
		InstallationCacheModel installationCacheModel =
			new InstallationCacheModel();

		installationCacheModel.uuid = getUuid();

		String uuid = installationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			installationCacheModel.uuid = null;
		}

		installationCacheModel.installationId = getInstallationId();

		installationCacheModel.description = getDescription();

		String description = installationCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			installationCacheModel.description = null;
		}

		installationCacheModel.path = getPath();

		String path = installationCacheModel.path;

		if ((path != null) && (path.length() == 0)) {
			installationCacheModel.path = null;
		}

		installationCacheModel.version = getVersion();

		String version = installationCacheModel.version;

		if ((version != null) && (version.length() == 0)) {
			installationCacheModel.version = null;
		}

		installationCacheModel.vmId = getVmId();

		installationCacheModel.schemeId = getSchemeId();

		return installationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Installation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Installation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Installation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Installation)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Installation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Installation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Installation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Installation)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Installation>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _installationId;
	private String _description;
	private String _path;
	private String _version;
	private long _vmId;
	private long _schemeId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Installation, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Installation)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("installationId", _installationId);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("path_", _path);
		_columnOriginalValues.put("version", _version);
		_columnOriginalValues.put("vmId", _vmId);
		_columnOriginalValues.put("schemeId", _schemeId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("path_", "path");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("installationId", 2L);

		columnBitmasks.put("description", 4L);

		columnBitmasks.put("path_", 8L);

		columnBitmasks.put("version", 16L);

		columnBitmasks.put("vmId", 32L);

		columnBitmasks.put("schemeId", 64L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Installation _escapedModel;

}