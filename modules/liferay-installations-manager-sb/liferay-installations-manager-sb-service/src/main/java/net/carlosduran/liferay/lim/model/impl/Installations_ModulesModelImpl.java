/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package net.carlosduran.liferay.lim.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import net.carlosduran.liferay.lim.model.Installations_Modules;
import net.carlosduran.liferay.lim.model.Installations_ModulesModel;
import net.carlosduran.liferay.lim.model.Installations_ModulesSoap;
import net.carlosduran.liferay.lim.service.persistence.Installations_ModulesPK;

/**
 * The base model implementation for the Installations_Modules service. Represents a row in the &quot;LIM_Installations_Modules&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>Installations_ModulesModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Installations_ModulesImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Installations_ModulesImpl
 * @generated
 */
@JSON(strict = true)
public class Installations_ModulesModelImpl
	extends BaseModelImpl<Installations_Modules>
	implements Installations_ModulesModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a installations_ modules model instance should use the <code>Installations_Modules</code> interface instead.
	 */
	public static final String TABLE_NAME = "LIM_Installations_Modules";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"installationId", Types.BIGINT},
		{"moduleId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("installationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("moduleId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LIM_Installations_Modules (uuid_ VARCHAR(75) null,installationId LONG not null,moduleId LONG not null,primary key (installationId, moduleId))";

	public static final String TABLE_SQL_DROP =
		"drop table LIM_Installations_Modules";

	public static final String ORDER_BY_JPQL =
		" ORDER BY installations_Modules.id.installationId ASC, installations_Modules.id.moduleId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY LIM_Installations_Modules.installationId ASC, LIM_Installations_Modules.moduleId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long INSTALLATIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long MODULEID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Installations_Modules toModel(
		Installations_ModulesSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		Installations_Modules model = new Installations_ModulesImpl();

		model.setUuid(soapModel.getUuid());
		model.setInstallationId(soapModel.getInstallationId());
		model.setModuleId(soapModel.getModuleId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Installations_Modules> toModels(
		Installations_ModulesSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<Installations_Modules> models =
			new ArrayList<Installations_Modules>(soapModels.length);

		for (Installations_ModulesSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public Installations_ModulesModelImpl() {
	}

	@Override
	public Installations_ModulesPK getPrimaryKey() {
		return new Installations_ModulesPK(_installationId, _moduleId);
	}

	@Override
	public void setPrimaryKey(Installations_ModulesPK primaryKey) {
		setInstallationId(primaryKey.installationId);
		setModuleId(primaryKey.moduleId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new Installations_ModulesPK(_installationId, _moduleId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((Installations_ModulesPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Installations_Modules.class;
	}

	@Override
	public String getModelClassName() {
		return Installations_Modules.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Installations_Modules, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Installations_Modules, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Installations_Modules, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Installations_Modules)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Installations_Modules, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Installations_Modules, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Installations_Modules)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Installations_Modules, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Installations_Modules, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Installations_Modules>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Installations_Modules.class.getClassLoader(),
			Installations_Modules.class, ModelWrapper.class);

		try {
			Constructor<Installations_Modules> constructor =
				(Constructor<Installations_Modules>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Installations_Modules, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Installations_Modules, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Installations_Modules, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<Installations_Modules, Object>>();
		Map<String, BiConsumer<Installations_Modules, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<Installations_Modules, ?>>();

		attributeGetterFunctions.put("uuid", Installations_Modules::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<Installations_Modules, String>)
				Installations_Modules::setUuid);
		attributeGetterFunctions.put(
			"installationId", Installations_Modules::getInstallationId);
		attributeSetterBiConsumers.put(
			"installationId",
			(BiConsumer<Installations_Modules, Long>)
				Installations_Modules::setInstallationId);
		attributeGetterFunctions.put(
			"moduleId", Installations_Modules::getModuleId);
		attributeSetterBiConsumers.put(
			"moduleId",
			(BiConsumer<Installations_Modules, Long>)
				Installations_Modules::setModuleId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getInstallationId() {
		return _installationId;
	}

	@Override
	public void setInstallationId(long installationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_installationId = installationId;
	}

	@JSON
	@Override
	public long getModuleId() {
		return _moduleId;
	}

	@Override
	public void setModuleId(long moduleId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_moduleId = moduleId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public Installations_Modules toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Installations_Modules>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Installations_ModulesImpl installations_ModulesImpl =
			new Installations_ModulesImpl();

		installations_ModulesImpl.setUuid(getUuid());
		installations_ModulesImpl.setInstallationId(getInstallationId());
		installations_ModulesImpl.setModuleId(getModuleId());

		installations_ModulesImpl.resetOriginalValues();

		return installations_ModulesImpl;
	}

	@Override
	public int compareTo(Installations_Modules installations_Modules) {
		Installations_ModulesPK primaryKey =
			installations_Modules.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Installations_Modules)) {
			return false;
		}

		Installations_Modules installations_Modules =
			(Installations_Modules)object;

		Installations_ModulesPK primaryKey =
			installations_Modules.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Installations_Modules> toCacheModel() {
		Installations_ModulesCacheModel installations_ModulesCacheModel =
			new Installations_ModulesCacheModel();

		installations_ModulesCacheModel.installations_ModulesPK =
			getPrimaryKey();

		installations_ModulesCacheModel.uuid = getUuid();

		String uuid = installations_ModulesCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			installations_ModulesCacheModel.uuid = null;
		}

		installations_ModulesCacheModel.installationId = getInstallationId();

		installations_ModulesCacheModel.moduleId = getModuleId();

		return installations_ModulesCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Installations_Modules, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Installations_Modules, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Installations_Modules, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((Installations_Modules)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Installations_Modules, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Installations_Modules, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Installations_Modules, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((Installations_Modules)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Installations_Modules>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _installationId;
	private long _moduleId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Installations_Modules, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Installations_Modules)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("installationId", _installationId);
		_columnOriginalValues.put("moduleId", _moduleId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("installationId", 2L);

		columnBitmasks.put("moduleId", 4L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Installations_Modules _escapedModel;

}