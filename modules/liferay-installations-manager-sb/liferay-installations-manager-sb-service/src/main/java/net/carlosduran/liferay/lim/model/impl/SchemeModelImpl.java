/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package net.carlosduran.liferay.lim.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import net.carlosduran.liferay.lim.model.Scheme;
import net.carlosduran.liferay.lim.model.SchemeModel;
import net.carlosduran.liferay.lim.model.SchemeSoap;

/**
 * The base model implementation for the Scheme service. Represents a row in the &quot;LIM_Scheme&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SchemeModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SchemeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SchemeImpl
 * @generated
 */
@JSON(strict = true)
public class SchemeModelImpl
	extends BaseModelImpl<Scheme> implements SchemeModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a scheme model instance should use the <code>Scheme</code> interface instead.
	 */
	public static final String TABLE_NAME = "LIM_Scheme";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"schemeId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"serverHostname", Types.VARCHAR},
		{"serverIP", Types.VARCHAR}, {"dbUser", Types.VARCHAR},
		{"dbPass", Types.VARCHAR}, {"dbName", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("schemeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("serverHostname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("serverIP", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dbUser", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dbPass", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dbName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LIM_Scheme (uuid_ VARCHAR(75) null,schemeId LONG not null primary key,name VARCHAR(75) null,serverHostname VARCHAR(75) null,serverIP VARCHAR(75) null,dbUser VARCHAR(75) null,dbPass VARCHAR(75) null,dbName VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table LIM_Scheme";

	public static final String ORDER_BY_JPQL = " ORDER BY scheme.schemeId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY LIM_Scheme.schemeId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long SCHEMEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Scheme toModel(SchemeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Scheme model = new SchemeImpl();

		model.setUuid(soapModel.getUuid());
		model.setSchemeId(soapModel.getSchemeId());
		model.setName(soapModel.getName());
		model.setServerHostname(soapModel.getServerHostname());
		model.setServerIP(soapModel.getServerIP());
		model.setDbUser(soapModel.getDbUser());
		model.setDbPass(soapModel.getDbPass());
		model.setDbName(soapModel.getDbName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Scheme> toModels(SchemeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Scheme> models = new ArrayList<Scheme>(soapModels.length);

		for (SchemeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public SchemeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _schemeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSchemeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _schemeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Scheme.class;
	}

	@Override
	public String getModelClassName() {
		return Scheme.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Scheme, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Scheme, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Scheme, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Scheme)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Scheme, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Scheme, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Scheme)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Scheme, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Scheme, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Scheme>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Scheme.class.getClassLoader(), Scheme.class, ModelWrapper.class);

		try {
			Constructor<Scheme> constructor =
				(Constructor<Scheme>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Scheme, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Scheme, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Scheme, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Scheme, Object>>();
		Map<String, BiConsumer<Scheme, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Scheme, ?>>();

		attributeGetterFunctions.put("uuid", Scheme::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Scheme, String>)Scheme::setUuid);
		attributeGetterFunctions.put("schemeId", Scheme::getSchemeId);
		attributeSetterBiConsumers.put(
			"schemeId", (BiConsumer<Scheme, Long>)Scheme::setSchemeId);
		attributeGetterFunctions.put("name", Scheme::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<Scheme, String>)Scheme::setName);
		attributeGetterFunctions.put(
			"serverHostname", Scheme::getServerHostname);
		attributeSetterBiConsumers.put(
			"serverHostname",
			(BiConsumer<Scheme, String>)Scheme::setServerHostname);
		attributeGetterFunctions.put("serverIP", Scheme::getServerIP);
		attributeSetterBiConsumers.put(
			"serverIP", (BiConsumer<Scheme, String>)Scheme::setServerIP);
		attributeGetterFunctions.put("dbUser", Scheme::getDbUser);
		attributeSetterBiConsumers.put(
			"dbUser", (BiConsumer<Scheme, String>)Scheme::setDbUser);
		attributeGetterFunctions.put("dbPass", Scheme::getDbPass);
		attributeSetterBiConsumers.put(
			"dbPass", (BiConsumer<Scheme, String>)Scheme::setDbPass);
		attributeGetterFunctions.put("dbName", Scheme::getDbName);
		attributeSetterBiConsumers.put(
			"dbName", (BiConsumer<Scheme, String>)Scheme::setDbName);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getSchemeId() {
		return _schemeId;
	}

	@Override
	public void setSchemeId(long schemeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_schemeId = schemeId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@JSON
	@Override
	public String getServerHostname() {
		if (_serverHostname == null) {
			return "";
		}
		else {
			return _serverHostname;
		}
	}

	@Override
	public void setServerHostname(String serverHostname) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_serverHostname = serverHostname;
	}

	@JSON
	@Override
	public String getServerIP() {
		if (_serverIP == null) {
			return "";
		}
		else {
			return _serverIP;
		}
	}

	@Override
	public void setServerIP(String serverIP) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_serverIP = serverIP;
	}

	@JSON
	@Override
	public String getDbUser() {
		if (_dbUser == null) {
			return "";
		}
		else {
			return _dbUser;
		}
	}

	@Override
	public void setDbUser(String dbUser) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dbUser = dbUser;
	}

	@JSON
	@Override
	public String getDbPass() {
		if (_dbPass == null) {
			return "";
		}
		else {
			return _dbPass;
		}
	}

	@Override
	public void setDbPass(String dbPass) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dbPass = dbPass;
	}

	@JSON
	@Override
	public String getDbName() {
		if (_dbName == null) {
			return "";
		}
		else {
			return _dbName;
		}
	}

	@Override
	public void setDbName(String dbName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dbName = dbName;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Scheme.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Scheme toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Scheme>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SchemeImpl schemeImpl = new SchemeImpl();

		schemeImpl.setUuid(getUuid());
		schemeImpl.setSchemeId(getSchemeId());
		schemeImpl.setName(getName());
		schemeImpl.setServerHostname(getServerHostname());
		schemeImpl.setServerIP(getServerIP());
		schemeImpl.setDbUser(getDbUser());
		schemeImpl.setDbPass(getDbPass());
		schemeImpl.setDbName(getDbName());

		schemeImpl.resetOriginalValues();

		return schemeImpl;
	}

	@Override
	public int compareTo(Scheme scheme) {
		long primaryKey = scheme.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Scheme)) {
			return false;
		}

		Scheme scheme = (Scheme)object;

		long primaryKey = scheme.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Scheme> toCacheModel() {
		SchemeCacheModel schemeCacheModel = new SchemeCacheModel();

		schemeCacheModel.uuid = getUuid();

		String uuid = schemeCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			schemeCacheModel.uuid = null;
		}

		schemeCacheModel.schemeId = getSchemeId();

		schemeCacheModel.name = getName();

		String name = schemeCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			schemeCacheModel.name = null;
		}

		schemeCacheModel.serverHostname = getServerHostname();

		String serverHostname = schemeCacheModel.serverHostname;

		if ((serverHostname != null) && (serverHostname.length() == 0)) {
			schemeCacheModel.serverHostname = null;
		}

		schemeCacheModel.serverIP = getServerIP();

		String serverIP = schemeCacheModel.serverIP;

		if ((serverIP != null) && (serverIP.length() == 0)) {
			schemeCacheModel.serverIP = null;
		}

		schemeCacheModel.dbUser = getDbUser();

		String dbUser = schemeCacheModel.dbUser;

		if ((dbUser != null) && (dbUser.length() == 0)) {
			schemeCacheModel.dbUser = null;
		}

		schemeCacheModel.dbPass = getDbPass();

		String dbPass = schemeCacheModel.dbPass;

		if ((dbPass != null) && (dbPass.length() == 0)) {
			schemeCacheModel.dbPass = null;
		}

		schemeCacheModel.dbName = getDbName();

		String dbName = schemeCacheModel.dbName;

		if ((dbName != null) && (dbName.length() == 0)) {
			schemeCacheModel.dbName = null;
		}

		return schemeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Scheme, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Scheme, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Scheme, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Scheme)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Scheme, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Scheme, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Scheme, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Scheme)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Scheme>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _schemeId;
	private String _name;
	private String _serverHostname;
	private String _serverIP;
	private String _dbUser;
	private String _dbPass;
	private String _dbName;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Scheme, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Scheme)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("schemeId", _schemeId);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("serverHostname", _serverHostname);
		_columnOriginalValues.put("serverIP", _serverIP);
		_columnOriginalValues.put("dbUser", _dbUser);
		_columnOriginalValues.put("dbPass", _dbPass);
		_columnOriginalValues.put("dbName", _dbName);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("schemeId", 2L);

		columnBitmasks.put("name", 4L);

		columnBitmasks.put("serverHostname", 8L);

		columnBitmasks.put("serverIP", 16L);

		columnBitmasks.put("dbUser", 32L);

		columnBitmasks.put("dbPass", 64L);

		columnBitmasks.put("dbName", 128L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Scheme _escapedModel;

}