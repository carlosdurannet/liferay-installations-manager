/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package net.carlosduran.liferay.lim.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the Installation service. Represents a row in the &quot;LIM_Installation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>net.carlosduran.liferay.lim.model.impl.InstallationModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>net.carlosduran.liferay.lim.model.impl.InstallationImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Installation
 * @generated
 */
@ProviderType
public interface InstallationModel extends BaseModel<Installation> {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a installation model instance should use the {@link Installation} interface instead.
	 */

	/**
	 * Returns the primary key of this installation.
	 *
	 * @return the primary key of this installation
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this installation.
	 *
	 * @param primaryKey the primary key of this installation
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this installation.
	 *
	 * @return the uuid of this installation
	 */
	@AutoEscape
	public String getUuid();

	/**
	 * Sets the uuid of this installation.
	 *
	 * @param uuid the uuid of this installation
	 */
	public void setUuid(String uuid);

	/**
	 * Returns the installation ID of this installation.
	 *
	 * @return the installation ID of this installation
	 */
	public long getInstallationId();

	/**
	 * Sets the installation ID of this installation.
	 *
	 * @param installationId the installation ID of this installation
	 */
	public void setInstallationId(long installationId);

	/**
	 * Returns the description of this installation.
	 *
	 * @return the description of this installation
	 */
	@AutoEscape
	public String getDescription();

	/**
	 * Sets the description of this installation.
	 *
	 * @param description the description of this installation
	 */
	public void setDescription(String description);

	/**
	 * Returns the path of this installation.
	 *
	 * @return the path of this installation
	 */
	@AutoEscape
	public String getPath();

	/**
	 * Sets the path of this installation.
	 *
	 * @param path the path of this installation
	 */
	public void setPath(String path);

	/**
	 * Returns the version of this installation.
	 *
	 * @return the version of this installation
	 */
	@AutoEscape
	public String getVersion();

	/**
	 * Sets the version of this installation.
	 *
	 * @param version the version of this installation
	 */
	public void setVersion(String version);

	/**
	 * Returns the vm ID of this installation.
	 *
	 * @return the vm ID of this installation
	 */
	public long getVmId();

	/**
	 * Sets the vm ID of this installation.
	 *
	 * @param vmId the vm ID of this installation
	 */
	public void setVmId(long vmId);

	/**
	 * Returns the scheme ID of this installation.
	 *
	 * @return the scheme ID of this installation
	 */
	public long getSchemeId();

	/**
	 * Sets the scheme ID of this installation.
	 *
	 * @param schemeId the scheme ID of this installation
	 */
	public void setSchemeId(long schemeId);

}